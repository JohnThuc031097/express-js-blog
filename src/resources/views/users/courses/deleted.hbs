<div class="col xl-max md-max container__courses-user">
    <div class="row container__courses-user-caption">Courses of me</div>
    <div class="row xl-o-space-between md-o-space-between container__courses-user-controls">
        <div class="col xl md-0_5"></div>
        <button button-id="view-courses"
            class="col xl md-1_5 btn text-link container__courses-user-controls-view-courses">View
            Courses ({{coursesCount}})</button>
        <div class="col xl-7 md-2"></div>
        {{#if courses}}
        <button button-id="restore-all"
            class="col xl md-1_5 btn text-link container__courses-user-controls-restore-all">Restore
            All
            (0)
        </button>
        <button button-id="delete-all"
            class="col xl md-1_5 btn text-link container__courses-user-controls-delete-all">Delete
            All
            (0)
        </button>
        {{else}}
        <div class="col xl md-1_5"></div>
        <div class="col xl md-1_5"></div>
        {{/if}}
        <div class="col xl md-0_5"></div>
    </div>
    <div class="row container__courses-user-heading">
        <div class="col xl-0_5 md-0_5 text-center container__courses-user-heading-item center">
            <div class="container__courses-user-heading-item-text">
                <input type="checkbox" id="ckbAll">
            </div>
        </div>
        <div class="col xl-0_5 md-0_5 text-center container__courses-user-heading-item">
            <span class="container__courses-user-heading-item-text">ID</span>
            <div class="container__courses-user-heading-item-icon">
                {{{sortable 'index' _sort}}}
            </div>
        </div>
        <div class="col xl-4 md-2_5 container__courses-user-heading-item">
            <span class="text-center container__courses-user-heading-item-text">Name</span>
            <div class="container__courses-user-heading-item-icon">
                {{{sortable 'name' _sort}}}
            </div>
        </div>
        <div class="col xl md text-center container__courses-user-heading-item">
            <span class="text-center container__courses-user-heading-item-text">Level</span>
            <div class="container__courses-user-heading-item-icon">
                {{{sortable 'level' _sort}}}
            </div>
        </div>
        <div class="col xl-2 md-1_5 text-center container__courses-user-heading-item">
            <span class="text-center container__courses-user-heading-item-text">Deleted At</span>
            <div class="container__courses-user-heading-item-icon">
                {{{sortable 'createdAt' _sort}}}
            </div>
        </div>
        <div class="col xl-2 md text-center container__courses-user-heading-item">
            <span class="text-center container__courses-user-heading-item-text">Controls</span>
        </div>
    </div>
    {{#each courses}}
    <div class="row text-link container__courses-user-table{{#if (isEven @index)}}-light{{/if}}">
        <div class="col xl-0_5 md-0_5 text-center container__courses-user-table-item">
            <input input-data="{{this._id}}" type="checkbox" name="ckbItem">
        </div>
        <div class="col xl-0_5 md-0_5 text-center container__courses-user-table-item">{{this.index}}</div>
        <div div-data="{{this._id}}" div-id="view-detail"
            class="col xl-4 md-2_5 text-link container__courses-user-table-item text-short">{{this.name}}</div>
        <div class="col xl md container__courses-user-table-item">{{this.level.name}}</div>
        <div class="col xl-2 md-1_5 container__courses-user-table-item">{{formatDate this.createdAt}}</div>
        <div class="col xl md text-center container__courses-user-table-item--controls">
            <div class="row xl-wrap md-wrap">
                <div class="col xl-6 md-max container__courses-user-table-item-child">
                    <button button-data="{{this._id}}" button-id="restore" class="btn">
                        Restore
                    </button>
                </div>
                <div class="col xl-6 md-max container__courses-user-table-item-child">
                    <button button-data="{{this._id}}" button-id="delete" class="btn">
                        Delete
                    </button>

                </div>
            </div>
        </div>
    </div>
    {{else}}
    <div class="row container__courses-user-table-empty">
        <div class="col xl-max md-max container__courses-user-table-empty-show-text">
            Không có khóa học nào trong thùng rác.
            <a class="btn text-link container__courses-user-table-empty-show-link" href="/user/{{idUser}}/courses/page">
                View Courses
            </a>
        </div>
    </div>
    {{/each}}
    <div id="{{optionsDialog.style}}"></div>
    <form id="{{optionsDialog.selector}}" class="row hide" method="POST" action="/">
    </form>
    <script>
        const _$ = document.querySelector.bind(document);
        const _$$ = document.querySelectorAll.bind(document);

        const cssRender = `{{{ cssRender }}}`;
        const optionsDialog = {{{ json optionsDialog }}};

        const frmDialogCourseRestore = FormDialog();
        frmDialogCourseRestore.init(optionsDialog, cssRender);
        frmDialogCourseRestore.createDialog({
            type: 'warn',
            title: 'Khôi phục khóa học',
            message: 'Bạn muốn khôi phục khóa học này?',
        });

        const frmDialogCourseRestoreAll = FormDialog();
        frmDialogCourseRestoreAll.init(optionsDialog, cssRender);
        frmDialogCourseRestoreAll.createDialog({
            type: 'warn',
            title: 'Khôi phục khóa học',
            message: 'Bạn muốn khôi phục tất cả khóa học đã chọn?',
        });

        const frmDialogCourseDelete = FormDialog();
        frmDialogCourseDelete.init(optionsDialog, cssRender);
        frmDialogCourseDelete.createDialog({
            type: 'error',
            title: 'Xóa khóa học',
            message: 'Hành động này <span style="color:red;">không thể khôi phục</span>. Bạn vẫn muốn xóa khóa học?',
        });

        const frmDialogCourseDeleteAll = FormDialog();
        frmDialogCourseDeleteAll.init(optionsDialog, cssRender);
        frmDialogCourseDeleteAll.createDialog({
            type: 'error',
            title: 'Xóa khóa học',
            message: 'Hành động này <span style="color:red;">không thể khôi phục</span>. Bạn vẫn muốn xóa tất cả khóa học đã chọn?',
        });

        const _eBtnDelete = _$$('button[button-data][button-id="delete"]');
        const _eBtnDeleteAll = _$('button[button-id="delete-all"]');
        const _eBtnRestore = _$$('button[button-data][button-id="restore"]');
        const _eBtnRestoreAll = _$('button[button-id="restore-all"]');
        const _eBtnViewCourses = _$$('button[button-id="view-courses"]');
        const _eDivView = _$$('div[div-data][div-id="view-detail"]');
        const _eChkAll = _$('input[type="checkbox"][id="ckbAll"]');
        const _eChkItem = _$$('input[type="checkbox"][name="ckbItem"]');
        const _selectorChkItemsChecked = 'input[type="checkbox"][name="ckbItem"]:checked';

        if (_eDivView) {
            _eDivView.forEach(e => {
                const idCourse = e.getAttribute('div-data');
                e.addEventListener('click', () => {
                    location.href = `/user/{{idUser}}/courses/page/detail/${idCourse}`;
                })
            })
        }

        if (_eBtnViewCourses) {
            _eBtnViewCourses.forEach(e => {
                e.addEventListener('click', () => {
                    location.href = `/user/{{idUser}}/courses/page`;
                });
            });
        }

        if (_eBtnDelete) {
            _eBtnDelete.forEach(e => {
                const idCourse = e.getAttribute('button-data');
                e.addEventListener('click', () => {
                    frmDialogCourseDelete.showDialog(
                        {
                            value: `/user/{{idUser}}/courses/api/delete/${idCourse}?_method=DELETE`,
                            button: [
                                {
                                    tag: 'input',
                                    attrs: ['type', 'value'],
                                    values: ['submit', 'Có'],
                                },
                                {
                                    tag: 'input',
                                    attrs: ['type', 'value'],
                                    values: ['button', 'Không'],
                                    isExit: true,
                                },
                            ]
                        })
                })
            })
        }

        if (_eBtnRestore) {
            _eBtnRestore.forEach(e => {
                const idCourse = e.getAttribute('button-data');
                e.addEventListener('click', () => {
                    frmDialogCourseRestore.showDialog(
                        {
                            value: `/user/{{idUser}}/courses/api/restore/${idCourse}?_method=PUT`,
                            button: [
                                {
                                    tag: 'input',
                                    attrs: ['type', 'value'],
                                    values: ['submit', 'Có'],
                                },
                                {
                                    tag: 'input',
                                    attrs: ['type', 'value'],
                                    values: ['button', 'Không'],
                                    isExit: true,
                                },
                            ]
                        });
                })
            })
        }

        if (_eBtnRestoreAll) {
            _eBtnRestoreAll.addEventListener('click', () => {
                const eChkItemsChecked = _$$(_selectorChkItemsChecked);
                if (eChkItemsChecked.length > 0) {
                    let idCourses = [..._eChkItem].reduce((totalId, element) => {
                        if (element.checked) {
                            totalId = [...totalId, element.getAttribute('input-data')];
                        }
                        return totalId;
                    }, []);
                    frmDialogCourseRestoreAll.showDialog(
                        {
                            value: `/user/{{idUser}}/courses/api/restore/${idCourses}?_method=PUT`,
                            button: [
                                {
                                    tag: 'input',
                                    attrs: ['type', 'value'],
                                    values: ['submit', 'Có'],
                                },
                                {
                                    tag: 'input',
                                    attrs: ['type', 'value'],
                                    values: ['button', 'Không'],
                                    isExit: true,
                                },
                            ]
                        })
                }
            });
        }
        if (_eBtnDeleteAll) {
            _eBtnDeleteAll.addEventListener('click', () => {
                const eChkItemsChecked = _$$(_selectorChkItemsChecked);
                if (eChkItemsChecked.length > 0) {
                    let idCourses = [..._eChkItem].reduce((totalId, element) => {
                        if (element.checked) {
                            totalId = [...totalId, element.getAttribute('input-data')];
                        }
                        return totalId;
                    }, []);
                    frmDialogCourseDeleteAll.showDialog(
                        {
                            value: `/user/{{idUser}}/courses/api/delete/${idCourses}?_method=DELETE`,
                            button: [
                                {
                                    tag: 'input',
                                    attrs: ['type', 'value'],
                                    values: ['submit', 'Có'],
                                },
                                {
                                    tag: 'input',
                                    attrs: ['type', 'value'],
                                    values: ['button', 'Không'],
                                    isExit: true,
                                },
                            ]
                        })
                }
            });
        }

    </script>
    <script>

        if (_eChkAll) {

            if (_eChkItem) {
                _eChkItem.forEach(e => {
                    e.addEventListener('click', () => {
                        let isCheck = true;
                        if (!e.checked) isCheck = false;
                        e.checked = isCheck;
                        updateCountChecked();
                    });
                })
            }

            _eChkAll.addEventListener('click', () => {
                let isCheck = true;
                if (!_eChkAll.checked) isCheck = false;
                if (_eChkItem) {
                    _eChkItem.forEach(e => (e.checked = isCheck));
                    updateCountChecked();
                }
            });
        }

        const updateCountChecked = () => {
            const eChkItemsChecked = _$$(_selectorChkItemsChecked);
            if (eChkItemsChecked) {
                _eBtnRestoreAll.innerHTML = `Restore All (${eChkItemsChecked.length})`;
                _eBtnDeleteAll.innerHTML = `Delete All (${eChkItemsChecked.length})`;
            }
        }

    </script>
</div>